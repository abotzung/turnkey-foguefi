#!/bin/bash
#  This script regen secrets for FOG (FTP / NFS / API)
#  Alexandre BOTZUNG <alexandre.botzung@grandest.fr> - dec. 2022
#
#  --- This script includes components from the FOG Project ---
#  FOG - Free, Open-Source Ghost is a computer imaging solution.
#  Copyright (C) 2007  Chuck Syperski & Jian Zhang
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#    any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# * @package  FOGProject
# * @author   Tom Elliott <tommygunsster@gmail.com>
# * @license  http://opensource.org/licenses/gpl-3.0 GPLv3
# * @link     https://fogproject.org

generatePassword() {
    local length="$1"
    [[ $length -ge 12 && $length -le 128 ]] || length=20
	
    while [[ ${#genpassword} -lt $((length-1)) || -z $special ]]; do
        # https://stackoverflow.com/a/20053121
        #newchar=$(head -c1 /dev/urandom | tr -dc '0-9a-zA-Z!#$%&()*+,-./:;<=>?@[]^_{|}~')
        newchar=$(head -c1 /dev/urandom | tr -dc '0-9a-zA-Z,._+:@%/-')
        if [[ -n $(echo $newchar | tr -dc ',._+:@%/-') ]]; then
            special=${newchar}
        elif [[ ${#genpassword} -lt $((length-1)) ]]; then
            genpassword=${genpassword}${newchar}
        fi
    done
    # 9$(date +%N) seems weird but it's important because date may return
    # a leading 0 causing modulo to fail on reading it as octal number
    position=$(( 9$(date +%N) % $length ))
    # inject the special character at a random position
    echo ${genpassword::($position)}$special${genpassword:($position)}
}

replaceKeywordinConfigfile() {
    local keyword="$1"
    local newstring="$2"
    local QUOAPOStr="$3" # Bad variable name, i know...
    local QuelFichier="$4"

    # Escape character for sed
    keyword=$(printf '%s\n' "$keyword" | sed -e 's/[]\/$*.^[]/\\&/g');
    newstring=$(printf '%s\n' "$newstring" | sed -e 's/[]\/$*.^[]/\\&/g');

    retsearch=$(cat ${QuelFichier} | grep ${keyword})
    if [[ -z "$retsearch" ]]; then
        echo "Search returned nothing!"
        exit 0
    fi
    # https://stackoverflow.com/questions/17542892/how-to-get-the-last-character-of-a-string-in-a-shell
    lastchar=${retsearch: -1}

    if [[ "${retsearch: -1}" == ";" ]]; then
        # ; est la fin de ligne, on est donc en presence d'une ligne qui est terminee.
        sed -i "/$keyword.*,/{;s/,\s.*/, $QUOAPOStr$newstring$QUOAPOStr);/g}" $QuelFichier
    else
        # ; n'est PAS la fin de ligne, on applique la methode alternative
        # sed -i '/'$keyword'/{n;s/".*/"'$newstring'"/}' $FOGConfigfile
        sed -i "/$keyword/{n;s/.*/$QUOAPOStr$newstring$QUOAPOStr/g}" $QuelFichier
    fi
}


FOGConfigfile=$(find /var/www -name config.class.php| head -n 1) # Cheap method for finding FOG's configuration file
APO="'"
QUO='"'

export php_ver=$(php -i | grep "PHP Version" | head -1 | cut -d' ' -f 4 | cut -d'.' -f1-2)
[[ -z ${phpfpm} ]] && export phpfpm="php${php_ver}-fpm"

echo ' === REGENERATE FOG Secrets. Please wait... ==='
echo '=> Stop FOG services...'
action=stop
systemctl $action $phpfpm
systemctl $action apache2
systemctl $action FOGMulticastManager
systemctl $action FOGImageReplicator
systemctl $action FOGScheduler
systemctl $action FOGSnapinReplicator
systemctl $action FOGSnapinHash
systemctl $action FOGPingHosts
systemctl $action FOGImageSize

# Debug purposes
cp $FOGConfigfile $FOGConfigfile.old
cp /opt/fog/.fogsettings /opt/fog/.fogsettings.old

# Change FTP password for NFS/FTP user ===================================================
cnt=0
ret=999
while [[ $ret -ne 0 && $cnt -lt 10  ]]; do
    [[ -z $password || $ret -ne 999 ]] && password=$(generatePassword 20)
    echo -e "$password\n$password" | passwd fogproject >>/dev/null 2>&1
    ret=$?
    let cnt+=1
done
# Change NFS Default storage password
mysql -s -N --execute="UPDATE nfsGroupMembers SET ngmPass = '$password' WHERE ngmID = '1';" fog
# Change TFTP Default storage password
mysql -s -N --execute="UPDATE globalSettings SET settingValue = '$password' WHERE settingKey LIKE '%FOG_TFTP_FTP_PASSWORD%';" fog

if [[ -f "$FOGConfigfile" ]]; then
	# Change password in config.class.php file
	#sed -i '/STORAGE_FTP_PASSWORD/{n;s/".*/"'$password'"/}' $FOGConfigfile
	replaceKeywordinConfigfile 'STORAGE_FTP_PASSWORD' "$password" "$APO" $FOGConfigfile
	#sed -i '/TFTP_FTP_PASSWORD/{n;s/".*/"'$password'"/}' $FOGConfigfile
	replaceKeywordinConfigfile 'TFTP_FTP_PASSWORD' "$password" "$APO" $FOGConfigfile
else
	echo "ERROR : FOG Config file not found !"
fi
# Change password in .fogsettings
sed -i "/password=/d; \$apassword=${APO}${password}${APO}" /opt/fog/.fogsettings
password=''

# Change API Key (len:128) ================================================================
APIKey=$(mcookie)$(mcookie)$(mcookie)$(mcookie)
# Change API Key
mysql -s -N --execute="UPDATE globalSettings SET settingValue = '$APIKey' WHERE settingKey LIKE '%FOG_API_TOKEN%';" fog
APIKey=''

# Change fogmaster password ===============================================================
masterpass=$(generatePassword 32)
# Update SQL password
mysql -N --execute="SET PASSWORD FOR 'fogmaster'@'localhost' = PASSWORD('$masterpass');"
# Update SQL fogmaster password
sed -i "/snmysqlpass=/d; \$asnmysqlpass=${APO}${masterpass}${APO}" /opt/fog/.fogsettings
if [[ -f "$FOGConfigfile" ]]; then
	# Change password in config.class.php file
	#sed -i '/DATABASE_PASSWORD.*,/{;s/,\s.*/, '$APO$masterpass$APO');/g}' $FOGConfigfile
	replaceKeywordinConfigfile 'DATABASE_PASSWORD' "$masterpass" "$APO" $FOGConfigfile
else
	echo "ERROR : FOG Config file not found !"
fi
masterpass=''

# Change StorageNode SQL password =========================================================
masterpass=$(generatePassword 20)
mysql -s -N --execute="UPDATE globalSettings SET settingValue = '$masterpass' WHERE settingKey LIKE '%FOG_STORAGENODE_MYSQLPASS%';" fog
# Update StorageNode SQL password
mysql -N --execute="SET PASSWORD FOR 'fogstorage'@'%' = PASSWORD('$masterpass');"
masterpass=''

# Change UUID of FOG installation =========================================================
dummypass=$(generatePassword 32) #Uses urandom
UUID=$(echo -n "$dummypass" | sha1sum | awk '{print $1}')
mysql -s -N --execute="UPDATE globalSettings SET settingValue = '$UUID' WHERE settingKey LIKE '%FOG_UUID%';" fog



echo "==== Starting FOG services..."
action=start
systemctl $action apache2
systemctl $action $phpfpm
systemctl $action FOGMulticastManager
systemctl $action FOGImageReplicator
systemctl $action FOGScheduler
systemctl $action FOGSnapinReplicator
systemctl $action FOGSnapinHash
systemctl $action FOGPingHosts
systemctl $action FOGImageSize

# Change web password fog account
/usr/lib/inithooks/bin/changepwdfog.py


echo ' === REGENERATE FOG Secrets done. Have a nice day! ==='
