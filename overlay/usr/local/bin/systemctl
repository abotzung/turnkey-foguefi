#!/bin/bash -e

# Temporary TKLDev build time systemctl wrapper.
#
# Only passes enable|disable as other actions will fail.

fatal() { echo "FATAL [$0]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$0]: $@"; }

#ARGLIST="$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 ($$)"
#echo "$ARGLIST (init) ERRLevel:$ERRCODE" >> /sysctl.txt


_start_stop() {
    exit_code=0

    # try service first; note this is also wrapped; see /usl/local/bin/service
    /usr/local/bin/service $2 $1 || exit_code=$?

    if [[ "$exit_code" -eq 0 ]]; then
        return
    else
        # check if an init.d script exists
        initd=/etc/init.d/$2
        if [[ -f "$initd" ]]; then
            $initd $1 || fatal "$initd $1 returned a non-zero exit code."
        else
            fatal "Unable to $1 service: $2 (tried 'service $2 $1', and $initd doesn't exist)."
        fi
    fi
}

_is_running() {
    pid=$(pgrep $1)
    if [[ -n "$pid" ]]; then
        echo 'true'
    else
        echo 'false'
    fi
}

if [[ "$#" -lt 1 ]]; then
    # XXX hack for gitlab - respond to 'systemctl | grep "\-\.mount"'
    echo "-.mount                                                                                     loaded active mounted   Root Mount"
    #echo "$ARGLIST (no commandline) ERRLevel:0" >> /sysctl.txt
    exit 0
fi

# 1st pass : Load COMMAND QUIET IGNORED from command-line
unset COMMAND SERVICE_NAME QUIET IGNORED ERRCODE
ERRCODE=0 #Â Final errorlevel to throw
while [[ "$#" -gt 0 ]]; do
    case $1 in
        start|stop|restart|reload|enable|disable|mask|unmask|is-failed|is-active|daemon-reload|list-units|is-enabled)
            if [[ -z "$COMMAND" ]]; then
                COMMAND=$1
                if [[ "$COMMAND" == "is-enabled" ]]; then
                    # is-enabled command not supported ; workaround for FOG installer (to force activate services)
                    #echo "disabled"sysctl
                    #echo "$ARGLIST (is-enabled) ERRLevel:0" >> /sysctl.txt
                    exit 1
                fi
                shift
            else
                warning "Already had command set ('$COMMAND')."
                warning "Now setting as '$COMMAND'."
                shift
            fi;;
        status)
            #fatal "Status currently not supported in a chroot.";;
            # Patched for FOG Installer (to trick services is successfuly launched)
            #echo "$ARGLIST (status_patch) ERRLevel:0" >> /sysctl.txt
            exit 0;;
        -q|--quiet)
            QUIET=true
            shift;;
        --*)
            IGNORED="$IGNORED $1"
            warning "Switch '$1' will be ignored."
            shift;;
        *)
            if [[ -z "$SERVICE_NAME" ]]; then
                DO_SERVICE=1
                SERVICE_NAME=${1%.service} # remove trailing '.service' if included
                #echo "I'm gonna $COMMAND the service $SERVICE_NAME"
                # Dirty, but "is working"
                if [[ -n "$COMMAND" ]]; then

                    if [[ "$SERVICE_NAME" == "ghost_localhost" ]] \
                            && [[ "$COMMAND" =~ ^(re)?start$|^stop$ ]]; then
                        SERVICE_NAME=ghost
                    fi

                    if [[ "$QUIET" == 'true' ]] \
                        && [[ "$COMMAND" != "is-failed" ]] \
                        && [[ "$COMMAND" != "is-active" ]]; then
                            warning "--quiet is only honored with commands is-active|is-failed."
                    fi

                    if [[ "$COMMAND" != "daemon-reload" ]] && [[ "$COMMAND" != "list-units" ]] && [[ -z "$SERVICE_NAME" ]]; then
                        fatal "Service name required with $COMMAND (1) ($SERVICE_NAME)"
                    fi

                    case $COMMAND in
						enable|disable)
							/usr/bin/systemctl $COMMAND $SERVICE_NAME || ERRCODE=$?;;
							#echo "$ARGLIST (ena/dis) ERRLevel:$ERRCODE" >> /sysctl.txt;;
							
                        start|stop)
                            _start_stop $COMMAND $SERVICE_NAME;;

                        restart|reload)
                            _start_stop stop $SERVICE_NAME
                            _start_stop start $SERVICE_NAME;;

                        mask|unmask)
                            # TODO ; multiloop
                            /usr/bin/systemctl $COMMAND $SERVICE_NAME || exit_code=$?
                            ERRCODE=$exit_code;;

                        is-failed|is-active)
                            running=$(_is_running $SERVICE_NAME)
                            if [[ "$running" == 'true' ]]; then
                                [[ -n "$QUIET" ]] || echo "active/running"
                                #[[ "$COMMAND" == "is-active" ]] || ERRCODE=0
                                [[ "$COMMAND" == "is-failed" ]] || ERRCODE=1
                                #exit 1
                            else
                                [[ -n "$QUIET" ]] || echo "inactive/failed"
                                [[ "$COMMAND" == "is-failed" ]] || ERRCODE=1
                                #[[ "$COMMAND" == "is-active" ]] || ERRCODE=0
                                #exit 0 # By default ERRCODE=0, so only an error raises the flag
                            fi;;
                    esac
                    #echo "Done."
                    unset SERVICE_NAME
                else
                    fatal "Command ('$COMMAND') and/or Service name ('$SERVICE_NAME') not set or not found."
                fi
                shift
            fi;;
    esac
done

# If an error has been throw before...
if [[ "$ERRCODE" -ne 0 ]]; then
    #echo "$ARGLIST (errcode) ERRLevel:$ERRCODE" >> /sysctl.txt
    exit 1
fi
# If a service has been treated
if [[ "$DO_SERVICE" -eq 1 ]]; then
    #echo "$ARGLIST (svc_err0) ERRLevel:$ERRCODE" >> /sysctl.txt
    exit 0
fi

# 2nd pass : Exec commands (witout SERVICE_NAME)
if [[ -n "$COMMAND" ]]; then

    if [[ "$QUIET" == 'true' ]] \
        && [[ "$COMMAND" != "is-failed" ]] \
        && [[ "$COMMAND" != "is-active" ]]; then
            warning "--quiet is only honored with commands is-active|is-failed."
    fi

    if [[ "$COMMAND" != "daemon-reload" ]] && [[ "$COMMAND" != "list-units" ]] && [[ -z "$SERVICE_NAME" ]]; then
        fatal "Service name required with $COMMAND (2) ($SERVICE_NAME)"
    fi

    case $COMMAND in
        daemon-reload)
            warning "Ignoring daemon-reload, init scripts not cached."
            #echo "$ARGLIST (daemon_reload) ERRLevel:0" >> /sysctl.txt
            exit 0;;

        list-units)
            # Patch for FOG installation
            echo "mariadb.service"
            warning "list-units: Running in chroot, ignoring" >&2
            # "$ARGLIST (mariadb_patch) ERRLevel:0" >> /sysctl.txt
            exit 0;;
    esac
else
    #echo "$ARGLIST (cmd_not_found) ERRLevel:1" >> /sysctl.txt
    fatal "Command ('$COMMAND') and/or Service name ('$SERVICE_NAME') not set or not found."
fi

#echo "$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 (2) ($$) ERRLevel:$ERRCODE" >> /sysctl.txt





