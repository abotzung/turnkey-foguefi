#!/bin/bash -ex

FOG_VER=1.5.10

ADMIN_NAME=fog
ADMIN_PASS=password

SRC=/opt/foginstall/installer
SRCFOGUEFI=/opt/foguefi
SRCPDS=/opt/fogplugin-postdownloadscript

WEBROOT=/var/www/fog

# --- Disable DHCP server
systemctl disable isc-dhcp-server

# --- Create the FOG installer folder
mkdir -p $SRC

# --- Download FOG installer (devel) from Gihub
git clone https://github.com/FOGProject/fogproject.git $SRC
cd $SRC
#git checkout dev-branch

# --- HOTPATCH ; allow internationalization configuration from commandline
# -installlang=""
# +[[ -z $installlang ]] && installlang=0
cd $SRC
mv $SRC/lib/common/input.sh $SRC/lib/common/input.sh_OLD
sed 's/installlang=""/[[ -z $installlang ]] \&\& installlang=0/g' $SRC/lib/common/input.sh_OLD > $SRC/lib/common/input.sh
chmod +x $SRC/lib/common/input.sh

# --- HOTPATCH ; FOG installation locks-up if the current hostname name is not populated into /etc/hosts
cp /etc/hosts /etc/hosts_bak
echo "127.0.0.1 $(hostname)" >> /etc/hosts

# --- Temporary patch : speedup iPXE compilation
cp $SRC/utils/FOGiPXE/buildipxe.sh $SRC/utils/FOGiPXE/buildipxe.sh_ORIG
sed -i '/^BUILDOPTS=.*/a nbcpu=$(nproc --all)\nnbcpu=$((nbcpu + 2))\nBUILDOPTS="${BUILDOPTS} -j${nbcpu}"' $SRC/utils/FOGiPXE/buildipxe.sh

# --- Install FOG Server 
# "Normal" mode (opposed as storage mode)/ SSL Enabled by default
cd bin
export installlang=1; ./installfog.sh -S -Y

# --- Revert temporary patch
rm $SRC/utils/FOGiPXE/buildipxe.sh
cp $SRC/utils/FOGiPXE/buildipxe.sh_ORIG $SRC/utils/FOGiPXE/buildipxe.sh

# --- revert back HOTPATCH ; FOG installation crashes if the current system name is not populated into /etc/hosts
cat /etc/hosts_bak > /etc/hosts
rm /etc/hosts_bak

# --- Prepare a faster buildipxe.sh script (without need for Internet)
cp $SRC/utils/FOGiPXE/buildipxe.sh $SRC/utils/FOGiPXE/buildipxe_nonet.sh
sed -i 's/git pull/#git pull/g' $SRC/utils/FOGiPXE/buildipxe_nonet.sh
# (faster compilation time)
sed -i '/^BUILDOPTS=.*/a nbcpu=$(nproc --all)\nnbcpu=$((nbcpu + 2))\nBUILDOPTS="${BUILDOPTS} -j${nbcpu}"' $SRC/utils/FOGiPXE/buildipxe_nonet.sh
chmod +x $SRC/utils/FOGiPXE/buildipxe_nonet.sh

# --- Add 17recompile_ipxecerts (Rebuild iPXE with new certificates regen by 16regen_fogcert)
cat > /usr/lib/inithooks/firstboot.d/17recompile_ipxecerts << EOF
#!/bin/bash
# This script recompiles iPXE with new certificates
trap '' 2 
systemctl stop ntp
find $SRC/utils/FOGiPXE/ -type f -exec touch {} +
sleep 2
cd $SRC/utils/FOGiPXE/
echo "=== Recompiling iPXE with new certs, please wait. (5-20 minutes) ==="
. buildipxe_nonet.sh > /dev/null
cp -rf $SRC/packages/tftp/* /tftpboot
systemctl start ntp
trap 2
EOF
chmod +x /usr/lib/inithooks/firstboot.d/17recompile_ipxecerts

# --- Cleanup
cd /
rm -rf $SRC/.git
rm -rf "$SRC/tmp"
mkdir "$SRC/tmp" ||Â true

# --- Create the FOG GRUB Patch
mkdir -p $SRCFOGUEFI

# --- Download FOGUEFI && install it
git clone https://github.com/abotzung/foguefi.git $SRCFOGUEFI
cd $SRCFOGUEFI
# !!! !!! !!! DANGER - This patch needs loop for mounting ISO and Ext? disk !!! !!! !!!
mount -t devtmpfs devtmpfs /dev
modprobe loop
./install.sh --unattended-yes
umount /dev

# --- Cleanup, again...
rm -rf "$SRCFOGUEFI"/tools/fogbuilder/sources
mkdir -p "$SRCFOGUEFI"/tools/fogbuilder/sources
rm -rf "$SRCFOGUEFI"/tools/fogbuilder/temp
mkdir -p "$SRCFOGUEFI"/tools/fogbuilder/temp
rm -rf "$SRCFOGUEFI"/tools/fogbuilder/rootfs
mkdir -p "$SRCFOGUEFI"/tools/fogbuilder/rootfs
rm -rf "$SRCFOGUEFI"/tools/fogbuilder/release
mkdir -p "$SRCFOGUEFI"/tools/fogbuilder/release

# --- Create the FOG PDS Addon
mkdir -p $SRCPDS

# --- Download FOG PDS Addon (devel) && install it
git clone https://github.com/abotzung/fogplugin-postdownloadscript.git $SRCPDS
cd $SRCPDS
./install.sh --unattended-yes

# --- Cleanup leftover IP address and server name info apache2 config file
FOGApacheFile=$(grep -rnw '/management/other/ca.cert.der$ - ' /etc/apache2 | head -n1 | cut -f1 -d:)
sed -i "/ServerName /c\    ServerName 127.0.0.1" "$FOGApacheFile"
sed -i "/ServerAlias /c\    ServerAlias turnkey-foguefi" "$FOGApacheFile"

# --- Correct a debug leftover in confconsole 
#     (confconsole crashes if eth{TRUC} have not an valid ip address)
sed -i 's/assert net.address is not None/#assert net.address is not None/g' /usr/lib/confconsole/ifutil.py
sed -i 's/assert net.netmask is not None/#assert net.netmask is not None/g' /usr/lib/confconsole/ifutil.py

# --- Better locales : console-setup 
CONF=/etc/default/console-setup

FONTFACE=Fixed
CODESET=guess
FONTSIZE=8x16
CHARMAP=UTF-8

sed -i "/^CODESET/  s/=.*/=$CODESET/; \
        /^FONTFACE/ s/=.*/=$FONTFACE/; \
        /^FONTSIZE/ s/=.*/=$FONTSIZE/; \
        /^CHARMAP/  s/=.*/=$CHARMAP/;" \
    $CONF

DEBIAN_FRONTEND=noninteractive dpkg-reconfigure console-setup




